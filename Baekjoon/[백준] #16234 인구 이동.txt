# [백준] #16234. 인구 이동

>[문제]: https://www.acmicpc.net/problem/16234
>
>| 시간 제한 | 메모리 제한 | 제출  | 정답 | 맞은 사람 | 정답 비율 |
>| :-------- | :---------- | :---- | :--- | :-------- | :-------- |
>| 2 초      | 512 MB      | 14960 | 5842 | 3259      | 35.107%   |
>
>- 메모리: 2028KB, 시간: 528ms, 코드 길이 2549B
>- 풀이시간: 1시간 
>- 제출회차: 1회차

### 핵심 알고리즘

- **인구이동 1턴당 전체 알고리즘을 실행 및 종료하는 solution 함수**
- **BFS를 이용해 나라별(특정 위치)를 받아 해당 지점에서 이동이 가능한 나라의 연합을 체크하는 BFS 함수**
- **체크된 연합대로 mymap을 update하는 함수**



***pair<int,int>로 묶으면 해석하기는 좋다. 하지만 그냥 배열 2개로 나눠서 선언하는 편이 구현하기 편하고 소요시간이 짧다!!***



``` c++
#include <iostream>
#include <queue>
#include <string.h>

using namespace std;
const int MAX =52;

int n,l,r;
int mymap[MAX][MAX];
bool visited[MAX][MAX];
int unionMap[MAX][MAX];
int unionSum[MAX*MAX];  
int unionNum[MAX*MAX];
int unionNumber=1;
int dx[4]={-1,0,1,0};
int dy[4]={0,-1,0,1};
bool finish=false;

bool range(int x,int y){
    return 0<= x  && x<n && 0<= y && y<n;
}

bool BFS(int x,int y){
    queue <pair<int,int>> q;
    q.push({x,y});
    visited[x][y]=true;
    bool BFSflag=false;
    while(!q.empty()){
        pair<int,int> current=q.front();
        q.pop();
        for(int i=0;i<4;i++){
            pair<int,int> next={current.first+dx[i],current.second+dy[i]};
            if(range(next.first,next.second) && !visited[next.first][next.second]){
                int personDiff=abs(mymap[current.first][current.second]-mymap[next.first][next.second]);
                if( l<= personDiff && personDiff<=r){
                    BFSflag=true;
                    finish = true;
                    if(unionNum[unionNumber]==0){
                        unionSum[unionNumber]+=mymap[current.first][current.second];
                        unionNum[unionNumber]++;
                        unionMap[current.first][current.second]=unionNumber;
                    }
                    visited[next.first][next.second]=true;
                    unionSum[unionNumber]+=mymap[next.first][next.second];
                    unionNum[unionNumber]++;
                    unionMap[next.first][next.second]=unionNumber;
                    q.push(next);
                }
            }
        }
    }
    return BFSflag;
}

void update(){
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(unionMap[i][j]==0)
                continue;
            mymap[i][j]=unionSum[unionMap[i][j]]/unionNum[unionMap[i][j]];
        }
    }
}

void init(){
    memset(visited,false,sizeof(visited));
    memset(unionMap,0,sizeof(unionMap));
    memset(unionSum,0,sizeof(unionSum));  //sum /
    memset(unionNum,0,sizeof(unionNum));  //sum /
    unionNumber=1;
    finish=false;
}

int solution(int idx){
    init();
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(!visited[i][j]){
                if(BFS(i,j))
                    unionNumber++;
            }
        }
    }
    if(!finish)
        return idx;
    update();
    return solution(idx+1);
}


int main(){
    
    cin>>n>>l>>r;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++)
            cin>>mymap[i][j];
    }
    cout<<solution(0);
}

```

